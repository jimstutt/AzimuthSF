name: enumerator
version: 0.4.19
id: enumerator-0.4.19-6babedd63f1526234de41067a6121914
license: MIT
copyright: 2010-2011 John Millikin, 2011 Mikhail Vorozhtsov
maintainer: jmillikin@gmail.com
stability: experimental
homepage: https://john-millikin.com/software/enumerator/
package-url:
synopsis: Reliable, high-performance processing with left-fold enumerators
description: Typical buffer&#x2013;based incremental I/O is based around a single loop,
             which reads data from some source (such as a socket or file), transforms
             it, and generates one or more outputs (such as a line count, HTTP
             responses, or modified file). Although efficient and safe, these loops are
             all single&#x2013;purpose; it is difficult or impossible to compose
             buffer&#x2013;based processing loops.
             .
             Haskell&#x2019;s concept of &#x201C;lazy I/O&#x201D; allows pure code to
             operate on data from an external source. However, lazy I/O has several
             shortcomings. Most notably, resources such as memory and file handles can
             be retained for arbitrarily long periods of time, causing unpredictable
             performance and error conditions.
             .
             Enumerators are an efficient, predictable, and safe alternative to lazy
             I/O. Discovered by Oleg Kiselyov, they allow large datasets to be processed
             in near&#x2013;constant space by pure code. Although somewhat more complex
             to write, using enumerators instead of lazy I/O produces more correct
             programs.
             .
             This library contains an enumerator implementation for Haskell, designed to
             be both simple and efficient. Three core types are defined, along with
             numerous helper functions:
             .
             * /Iteratee/: Data sinks, analogous to left folds. Iteratees consume
             a sequence of /input/ values, and generate a single /output/ value.
             Many iteratees are designed to perform side effects (such as printing to
             @stdout@), so they can also be used as monad transformers.
             .
             * /Enumerator/: Data sources, which generate input sequences. Typical
             enumerators read from a file handle, socket, random number generator, or
             other external stream. To operate, enumerators are passed an iteratee, and
             provide that iteratee with input until either the iteratee has completed its
             computation, or EOF.
             .
             * /Enumeratee/: Data transformers, which operate as both enumerators and
             iteratees. Enumeratees read from an /outer/ enumerator, and provide the
             transformed data to an /inner/ iteratee.
category: Data, Enumerator
author: John Millikin <jmillikin@gmail.com>
exposed: True
exposed-modules: Data.Enumerator Data.Enumerator.Binary
                 Data.Enumerator.Internal Data.Enumerator.IO Data.Enumerator.List
                 Data.Enumerator.Text Data.Enumerator.Trans
hidden-modules: Data.Enumerator.Compatibility Data.Enumerator.Util
trusted: False
import-dirs: C:\Users\jim\snap-boiler-plate/enumerator-0.4.19\ghc-7.4.1
library-dirs: C:\Users\jim\snap-boiler-plate/enumerator-0.4.19\ghc-7.4.1
hs-libraries: HSenumerator-0.4.19
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.5.0.0-597748f6f53a7442bcae283373264bb6
         bytestring-0.9.2.1-df82064cddbf74693df4e042927e015e
         containers-0.4.2.1-7c54595400348f577b3b4a45691c5afd
         text-0.11.2.0-b2986f5478f0efa626f8ba0494ed9670
         transformers-0.3.0.0-e822211489f7414505ab945e95cef411
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: C:\Users\jim\snap-boiler-plate/\doc\enumerator-0.4.19\html\enumerator.haddock
haddock-html: C:\Users\jim\snap-boiler-plate/\doc\enumerator-0.4.19\html
